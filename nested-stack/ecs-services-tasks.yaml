AWSTemplateFormatVersion: "2010-09-09"

Description: |
  ECS Cluster

Parameters:
  EcsHostSecurityGroup:
    Type: String
  EFSFileSystem:
    Type: String
  FargateTargetGroup:
    Type: String
  ECSTargetGroup:
    Type: String
  Cluster:
    Type: String
  EcsHostSubnets:
    Type: CommaDelimitedList
  EnvironmentName:
    Type: String
  EnvironmentName1:
    Type: String
  EnvironmentName2:
    Type: String
  VpcId:
    Description: The ID of the existing VPC
    Type: AWS::EC2::VPC::Id

  FargateServiceName:
    Description: name for fargate service 
    Type: String
    Default: "fargate-service"

  FargateServiceDesiredCount:
    Description: Number of tasks for fargate service 
    Type: Number
    Default: 1

  FargateContainerUrl:
    Description: name for fargate service 
    Type: String
    Default: "nginx:latest"

  FargateTaskDefinitionName:
    Description: name for fargate service 
    Type: String
    Default: "fargate-nginx-task"

  MyServiceName:
    Description: name for fargate service 
    Type: String
    Default: "nginx-service"

  NginxServiceDesiredCount:
    Description: Number of tasks for nginx service 
    Type: Number
    Default: 1

  NginxContainerUrl:
    Description: name for fargate service 
    Type: String
    Default: "nginx:latest"

  NginxTaskDefinitionName:
    Description: name for fargate service 
    Type: String
    Default: "nginx-task"

Resources:
  ECSServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ["ecs-tasks.amazonaws.com"]
            Action: ['sts:AssumeRole']
      Path: "/"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
        - "arn:aws:iam::aws:policy/AmazonRDSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonECS_FullAccess"
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess"

  MyECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref MyServiceName
      Cluster: !Ref Cluster
      DesiredCount: !Ref NginxServiceDesiredCount
      TaskDefinition: !Ref NginxTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref EcsHostSubnets  # Specify your subnets here
          SecurityGroups: 
            - !Ref EcsHostSecurityGroup # Specify your security groups here
      LoadBalancers:
        - TargetGroupArn: !ImportValue ECSTargetGroup # Use the ECS target group
          ContainerName: MyContainer
          ContainerPort: 80



  NginxTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref NginxTaskDefinitionName 
      ContainerDefinitions:
        - Name: MyContainer
          Image: !Ref NginxContainerUrl
          Essential: true
          Memory: 300
          Cpu: 256
          PortMappings:
            - ContainerPort: 80
          MountPoints:  # Add a mount point for the EFS volume
            - ContainerPath: "/efs"
              SourceVolume: "efs"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !GetAtt ECSServiceRole.Arn
      Volumes:  # Define the EFS volume
        - Name: "efs"
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFSFileSystem
            RootDirectory: "/"
            TransitEncryption: 'ENABLED'
      TaskRoleArn: !GetAtt ECSServiceRole.Arn


  ECSServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: MyECSService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub service/${Cluster}/${MyServiceName}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  FargateSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-FargateService
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0  # Allow incoming traffic on port 80
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: environment
          Value: !Ref EnvironmentName
        - Key: environment1
          Value: !Ref EnvironmentName1
        - Key: environment2
          Value: !Ref EnvironmentName2
        - Key: environment3
          Value:  staging
        - Key: environment4
          Value:  staging
        - Key: environment5
          Value:  staging
        - Key: environment6
          Value:  staging
        - Key: environment7
          Value:  staging
        - Key: environment8
          Value:  staging
  ECSServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSServiceScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
  FargateTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref FargateTaskDefinitionName 
      ContainerDefinitions:
        - Name: MyContainerfargate
          Image: !Ref FargateContainerUrl
          Essential: true
          Memory: 300
          Cpu: 256
          PortMappings:
            - ContainerPort: 80
          MountPoints:  # Add a mount point for the EFS volume
            - ContainerPath: "/efs"
              SourceVolume: "efs"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSServiceRole.Arn
      Cpu: '256'
      Memory: '0.5GB'
      Volumes:  # Define the EFS volume
        - Name: "efs"
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFSFileSystem
            RootDirectory: "/"
            TransitEncryption: 'ENABLED'
      TaskRoleArn: !GetAtt ECSServiceRole.Arn

  FargateService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref FargateServiceName
      Cluster: !Ref Cluster
      DesiredCount: !Ref FargateServiceDesiredCount  # Ensure this is a number
      TaskDefinition: !Ref FargateTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref EcsHostSubnets
          SecurityGroups: 
            - !Ref FargateSecurityGroup  # Ensure this is an array
          AssignPublicIp: ENABLED
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !ImportValue FargateTargetGroup # Use the Fargate target group
          ContainerName: MyContainerfargate
          ContainerPort: 80  # Ensure this is a number

  FargateServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: FargateService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub service/${Cluster}/${FargateServiceName}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  FargateServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: FargateServiceScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref FargateServiceScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization